package com.example.controller;

import com.example.model.Order;
import com.example.model.Truck;
import com.example.model.User;
import com.example.service.OrderService;
import com.example.service.TruckService;
import com.example.service.UserService;
import com.example.utils.JwtUtil;
import jakarta.servlet.http.HttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import com.example.utils.PasswordUtil;
import org.springframework.web.servlet.view.RedirectView;

import java.sql.SQLException;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.http.HttpHeaders;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;
//This controller maps the root path ("/") to the index.html file generated by the Vue.js build.
@Controller
public class VueController {

    private long startTime;
    private final UserService userService;
    private final TruckService truckService;
    private final OrderService orderService;

    @Autowired
    public VueController(UserService userService, TruckService truckService, OrderService orderService){
        this.userService=userService;
        this.truckService=truckService;
        this.orderService=orderService;
    }

    @GetMapping("/")
    public String index() {
        System.out.println("startTime: " + startTime);
        long nowTime = System.currentTimeMillis();
        System.out.println("nowTime: " + nowTime);
        return "index";
    }

    @GetMapping("/mylogin")
    public String mylogin() {
        return "index";
    }


    @GetMapping("/changepwd")
    public RedirectView changepwd() {
        return new RedirectView("/");
    }

    @GetMapping("/tracking")
    public String tracking(){
        return "index";
    }

    @PostMapping("/tracking")
    public ResponseEntity<List<Order>> trackOrder(@RequestBody Map<String, String> request) {
        String shipId = request.get("shipId");
        System.out.println("Received shipId: " + shipId);
        Order myorder;
        List<Order> orders = new ArrayList<>(1);
        if (shipId!=null&& !shipId.isEmpty()){
            myorder = orderService.getOrderByShipId(Long.valueOf(shipId));
            orders.add(myorder);
        }
        return ResponseEntity.ok(orders);
    }

    @GetMapping("/myorder")
    public ResponseEntity<List<Order>> myorder
            (@RequestHeader(value = "Authorization",required = false) String authHeader) throws SQLException {
        if (authHeader == null) {
            //redirect
            return ResponseEntity.status(HttpStatus.FOUND).header(HttpHeaders.LOCATION, "/mylogin").build();
        }
        String authToken = authHeader.replace("Bearer ", "");
        String userId = JwtUtil.getUsernameFromToken(authToken);

        List<Order> orders = userService.getOrdersByUserId(userId);

        return ResponseEntity.ok(orders);
    }


    @GetMapping("/signup")
    public String signup() {return "index";}
    @PostMapping("/signup")
    public ResponseEntity<?> signUp(@RequestBody Map<String, String> req) {
        String userId = req.get("userId");
        String email = req.get("email");
        String password = req.get("password");
        System.out.println("Received user: " + userId);
        try {
// String salt = PasswordUtil.generateSalt();
            String hashedPassword = PasswordUtil.hashPassword(password,"saltECE568love");
            User myuser = new User(userId,email,hashedPassword);
// myuser.setSalt(salt);
            userService.addUser(myuser);
// after signup, login directly and save account into JWT
            String token = JwtUtil.generateToken(userId);
            Map<String, Object> responseBody = new HashMap<>();
            responseBody.put("token", token);
            responseBody.put("userInfo",myuser);
            return ResponseEntity.ok(responseBody);
        } catch (SQLException e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Oops, something wrong sad.");
        }
    }
    @PostMapping("/mylogin")
    public ResponseEntity<?> login(@RequestBody User req) {
        System.out.println("Login user: " + req.getUserId());
        User myuser = userService.getUserById(req.getUserId());
        if (myuser!=null){
            String hashedPassword = PasswordUtil.hashPassword(req.getPassword(),"saltECE568love");
            if (myuser.getPassword().equals(hashedPassword)){
                // login successfully, create and save JWT,session or Token
                //1. login successfully, create JWT
                String token = JwtUtil.generateToken(req.getUserId());
                //2. create JSON obj, including JWT
                Map<String, Object> responseBody = new HashMap<>();
                responseBody.put("token", token);
                responseBody.put("userInfo",myuser);
                //3. return JSON obj
                return ResponseEntity.ok(responseBody);
            }else{
                System.out.println("Password is not same");
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Invalid password");
            }
        }else{
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("User not found");
        }
    }

    @GetMapping("/profile")
    public ResponseEntity<?> profile(@RequestHeader(value = "Authorization") String authHeader) {
        String authToken = authHeader.replace("Bearer ", "");
        String userId = JwtUtil.getUsernameFromToken(authToken);
        System.out.println("Look at profile of: " + userId);
        User myuser = userService.getUserById(userId);
        if (myuser!=null){
            String email = myuser.getEmail();
            return ResponseEntity.ok(email);
        }else{
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("User not found");
        }
    }
    @GetMapping("/logout")
    public RedirectView logout(){return new RedirectView("/", true);}
    @PostMapping("/logout")
    public ResponseEntity<String> logout(HttpServletRequest request) {
        System.out.println("Now doing logout");
        String headerAuth = request.getHeader("Authorization");

        // Check if headerAuth is not null before calling substring()
        if (headerAuth != null && headerAuth.startsWith("Bearer ")) {
            String jwtToken = headerAuth.substring(7);
            String userId = JwtUtil.getUsernameFromToken(jwtToken);
            System.out.println("User want to log out: " + userId);
            return ResponseEntity.ok(userId);
        } else {
            // Handle the case where the Authorization header is missing or invalid
            System.out.println("Authorization header is missing or invalid");
            // You might want to return a different response or throw an exception here
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Authorization header is missing or invalid");
        }
    }

    @PostMapping("/changepwd")
    public ResponseEntity<?> changepwd(@RequestBody Map<String, String> request,@RequestHeader("Authorization") String authHeader)  {
        System.out.println("Now doing change pwd");
        String oldPassword = request.get("oldPassword");
        String oldHashedPassword = PasswordUtil.hashPassword(oldPassword,"saltECE568love");
        String newPassword = request.get("newPassword");
        String newHashedPassword = PasswordUtil.hashPassword(newPassword,"saltECE568love");

        String authToken = authHeader.replace("Bearer ", "");
        String userId = JwtUtil.getUsernameFromToken(authToken);
        User myuser = userService.getUserById(userId);

        if (myuser.getPassword().equals(oldHashedPassword)) {
            System.out.println("old pwd: correct");
            myuser.setPassword(newHashedPassword);
            try{
                userService.updateUser(myuser);
                System.out.println("new pwd: done");
                return ResponseEntity.ok("Password changed successfully.");
            }catch (SQLException e){
                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Oops, database wrong sad.");
            }
        }else{
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Old password is not correct");
        }
    }
}
