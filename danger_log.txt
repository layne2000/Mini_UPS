4/19/2023

1. There’s a built-in class called Package in Java. If we use Package as the entity class, it may lead to confusion. I changed it to Order.

4/20

1. How to handle concurrency in springboot app?  Services are typically configured as singleton beans, which means there is only one instance of the service bean shared across the entire application. However, the underlying SqlSession used in MyBatis is managed by Spring and is thread-safe. When a method is called concurrently, Spring will create separate SqlSession instances for each thread. We don’t need to manually open the session and commit and close it. Spring takes care for us.

2. For non-web part after the start of SpringApplication.run(UpsApplication.class, args), even I threw an exception, spring app won’t stop instantly. So it’s better to call exit(1) when initialization fails.

3. Because I set userId as the primary key, it’s not allowed to change userId.

4/21
1. For a spring component constructor, if we want to pass a self-defined argument, then we need to create a configuration class and corresponding constructor and manually manage its lifecycle (It's not bean anymore). But the default value is totally fine.
2. once the server is restarted with the user login, the web will show the user’s user Id, we have to logout to clean the local Storage.

4/22
1. If I don't add volatile to the isConnected variable, I might face visibility issues. The variable's value might be cached locally by each thread, so updates made by one thread may not be immediately visible to other threads. This can lead to unpredictable behavior
2. Error page handler, I try to mapping error page to home page or override error page handler, both are useless, so I haven’t fixed this problem.

4/23
1. when we see the detail of an order, the console of the web will report type error null read of an order, I cannot find where report this error, but it doesn’t matter the functionality.

Testing:

If you want to run in the docker, change the worldServerIP or hostname in the docker-compose.yml. After starting the world server, run 1) docker-compose down 2) docker rmi project:latest 3) docker-compose up. Caution: you may run 3) docker-compose up twice to create the DB configuration file first and then run normally

To use localhost rather than docker to test this project, change from mysql before 3306 to localhost in the application.properties and mybatis-config.xml in the main/resources folder, then go to ups/build/libs directory and run java -jar ups-0.0.1-SNAPSHOT.jar _worldServerIP_.
